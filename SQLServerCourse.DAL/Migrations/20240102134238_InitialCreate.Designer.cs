// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLServerCourse.DAL;

#nullable disable

namespace SQLServerCourse.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240102134238_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Keywords", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Lesson", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("LectureMarkup")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.LessonRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfReceiving")
                        .HasColumnType("datetime2");

                    b.Property<byte>("LessonId")
                        .HasColumnType("tinyint");

                    b.Property<float>("Mark")
                        .HasColumnType("real");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonRecords", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.QueryWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("KeywordId")
                        .HasColumnType("int");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<byte>("QuestionId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QueryWords", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Question", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayQuestion")
                        .IsRequired()
                        .HasMaxLength(750)
                        .HasColumnType("nvarchar(750)");

                    b.Property<byte>("LessonId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("ReviewTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.TestVariant", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRight")
                        .HasColumnType("bit");

                    b.Property<byte>("QuestionId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("VariantNumber")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestVariants", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Login = "Admin123",
                            Password = "8bb0cf6eb9b17d0f7d22b456f121257dc1254e1f01665370476383ea776df414",
                            Role = 2
                        },
                        new
                        {
                            Id = 2L,
                            Login = "CommonUser02",
                            Password = "8bb0cf6eb9b17d0f7d22b456f121257dc1254e1f01665370476383ea776df414",
                            Role = 0
                        },
                        new
                        {
                            Id = 3L,
                            Login = "qwerty1234",
                            Password = "e7f5725812407063178c78bf4f1468f9e661ebd6c1fd41dd933ea1d126cc189e",
                            Role = 0
                        });
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Analys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("CurrentGrade")
                        .HasColumnType("real");

                    b.Property<bool>("IsEditAble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExamCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewLeft")
                        .HasColumnType("bit");

                    b.Property<byte>("LessonsCompleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Age = (byte)0,
                            CurrentGrade = 0f,
                            IsEditAble = true,
                            IsExamCompleted = false,
                            IsReviewLeft = false,
                            LessonsCompleted = (byte)5,
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Age = (byte)0,
                            CurrentGrade = 0f,
                            IsEditAble = true,
                            IsExamCompleted = false,
                            IsReviewLeft = false,
                            LessonsCompleted = (byte)0,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Age = (byte)0,
                            CurrentGrade = 0f,
                            IsEditAble = true,
                            IsExamCompleted = false,
                            IsReviewLeft = false,
                            LessonsCompleted = (byte)0,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Film", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Films", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Hall", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Halls", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.HallRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("Capacity")
                        .HasColumnType("smallint");

                    b.Property<byte>("HallId")
                        .HasColumnType("tinyint");

                    b.Property<short>("Number")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("HallRows", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Screening", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FilmId")
                        .HasColumnType("bigint");

                    b.Property<byte>("HallId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("HallId");

                    b.ToTable("Screenings", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("Row")
                        .HasColumnType("tinyint");

                    b.Property<long>("ScreeningId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Seat")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ScreeningId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.LessonRecord", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.Lesson", "Lesson")
                        .WithMany("LessonRecords")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLServerCourse.Domain.Entity.User", "User")
                        .WithMany("LessonRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.QueryWord", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.Keyword", "Keyword")
                        .WithMany("QueryWords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLServerCourse.Domain.Entity.Question", "Question")
                        .WithMany("QueryWords")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Question", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Review", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.TestVariant", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.Question", "Question")
                        .WithMany("TestVariants")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.UserProfile", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entity.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("SQLServerCourse.Domain.Entity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.HallRow", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entitys_for_lesson.Hall", "Hall")
                        .WithMany("HallRows")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Screening", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entitys_for_lesson.Film", "Film")
                        .WithMany("Screenings")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLServerCourse.Domain.Entitys_for_lesson.Hall", "Hall")
                        .WithMany("Screenings")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Ticket", b =>
                {
                    b.HasOne("SQLServerCourse.Domain.Entitys_for_lesson.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Keyword", b =>
                {
                    b.Navigation("QueryWords");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Lesson", b =>
                {
                    b.Navigation("LessonRecords");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.Question", b =>
                {
                    b.Navigation("QueryWords");

                    b.Navigation("TestVariants");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entity.User", b =>
                {
                    b.Navigation("LessonRecords");

                    b.Navigation("Reviews");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Film", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Hall", b =>
                {
                    b.Navigation("HallRows");

                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("SQLServerCourse.Domain.Entitys_for_lesson.Screening", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
